;; configuration for CEDET
(load-file "/home/tugosavi/emacs/cedet-1.0/common/cedet.el")
(global-ede-mode t)                      ; Enable the Project management system
(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion 
(semantic-load-enable-minimum-features)
(global-srecode-minor-mode 1)            ; Enable template insertion menu

(add-to-list 'load-path "/home/tugosavi/emacs/ecb-2.40")
(load-file "/home/tugosavi/emacs/ecb-2.40/ecb.el")

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ecb-options-version "2.40")
 '(ecb-source-path (quote (("/home/tugosavi/Work/source/latest" "latest"))))
 '(show-paren-mode t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "gray12" :foreground "green" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 90 :width normal :foundry "unknown" :family "Liberation Mono")))))

;; configuration for fsharp
;;
(setq load-path (cons "~/emacs/fsharp" load-path))
(setq auto-mode-alist (cons '("\\.fs[iylx]?$" . fsharp-mode) auto-mode-alist))
(autoload 'fsharp-mode "fsharp" "Major mode for editing F# code." t)
(autoload 'run-fsharp "inf-fsharp" "Run an inferior F# process." t)
(setq inferior-fsharp-program "mono /home/tugosavi/Downloads/f_sharp/FSharp-2.0.0.0/bin/fsi.exe --readline-")
(setq fsharp-compiler "mono /home/tugosavi/Downloads/f_sharp/FSharp-2.0.0.0/bin/fsc.exe ")

;; configuration for haskell
(load "~/emacs/haskell-mode/haskell-site-file")
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(setq haskell-program-name "/usr/bin/ghci")

;; configuration of list
;; Set up the Common Lisp environment
(add-to-list 'load-path "/usr/share/common-lisp/source/slime/")
(setq inferior-lisp-program "/usr/bin/sbcl")
(require 'slime)
(slime-setup)

;; changing default frame size
(add-to-list 'default-frame-alist '(left . 0))
(add-to-list 'default-frame-alist '(top . 0))
(add-to-list 'default-frame-alist '(height . 50))
(add-to-list 'default-frame-alist '(width . 120))

;; emacs music player
;;(add-to-list 'load-path "~/elisp/emms/")
;;(require 'emms-setup)
;;(emms-standard)
;;(emms-default-players)
;; Show the current track each time EMMS
;; starts to play a track with "NP : "
;;(add-hook 'emms-player-started-hook 'emms-show)
;;(setq emms-show-format "NP: %s")

;; When asked for emms-play-directory,
;; always start from this one 
;;(setq emms-source-file-default-directory "~/zic/")
;; Want to use alsa with mpg321 ? 
;;(setq emms-player-mpg321-parameters '("-o" "alsa"))
;;

;; Emacs themes
(add-to-list 'load-path "~/emacs/color-theme/")
(require 'color-theme)
(color-theme-initialize)
(color-theme-calm-forest)

;; load RFC viewer and downloader
(load-file "/home/tugosavi/emacs/rfcview.el")
(load-file "/home/tugosavi/emacs/get-rfc.el")


(add-to-list 'load-path "/home/tugosavi/emacs")
(require 'irfc)
(setq irfc-directory "/home/tugosavi/notes/rfc")
(setq irfc-assoc-mode t)

(put 'upcase-region 'disabled nil)

(add-to-list 'load-path "~/emacs/org-mode/lisp")
(add-to-list 'load-path "~/emacs/org-mode/contrib/lisp")
(add-to-list 'load-path "~/emacs/org-mode/EXPERIMENTAL")
(require 'org-install)

(ido-mode t)

(load-file "~/emacs/graphviz-dot-mode.el")


; babel settings for org-mode
(setq org-ditaa-jar-path "~/java/ditaa0_6b.jar")
(setq org-plantuml-jar-path "~/java/plantuml.jar")
(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)
(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (sh . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
         (latex . t))))

; Do not prompt to confirm evaluation
; This may be dangerous - make sure you understand the consequences
; of setting this -- see the docstring for details
(setq org-confirm-babel-evaluate nil)

; Use fundamental mode when editing plantuml blocks with C-c '
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
